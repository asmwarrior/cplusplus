// Copyright (c) 2020 Roberto Raggi <roberto.raggi@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

%class Parser

%token-type TokenKind

%{
  class DeclarativeRegion;

  struct NamespaceData {
    DeclarativeRegion* region = nullptr;
  };

  struct ClassData {
    DeclarativeRegion* region = nullptr;
    DeclarativeRegion* lexicalRegion = nullptr;
    bool isComplete = false;
  };

  class Symbol {
   public:
    Name name;
    Symbol* next = nullptr;
    std::size_t index = 0;
    std::variant<std::monostate, NamespaceData, ClassData> data;

    size_t hashCode() {
      return cxx::hashCode(name);
    }

    bool isNamespace() const {
      return std::holds_alternative<NamespaceData>(data);
    }

    bool isClass() const {
      return std::holds_alternative<ClassData>(data);
    }
  };

  class Scope {
    std::vector<Symbol*> symbols_;
    std::vector<Symbol*> buckets_;

   public:
    auto begin() const { return symbols_.begin(); }

    auto end() const { return symbols_.end(); }

    Symbol* find(const Name& name) const {
      if (symbols_.empty()) return nullptr;
      const auto h = hashCode(name) % buckets_.size();
      for (auto sym = buckets_[h]; sym; sym = sym->next) {
        if (sym->name == name)
          return sym;
      }
      return nullptr;
    }

    void add(Symbol* symbol) {
      symbol->index = symbols_.size();
      symbols_.push_back(symbol);
      if (symbols_.size() < (buckets_.size() * 0.6)) {
        const auto h = symbol->hashCode() % buckets_.size();
        symbol->next = buckets_[h];
        buckets_[h] = symbol;
      } else {
        rehash();
      }
    }

    void rehash() {
      buckets_ = std::vector<Symbol*>(buckets_.empty() ? 8 : buckets_.size() * 2);
      for (auto symbol: symbols_) {
        const auto h = symbol->hashCode() % buckets_.size();
        symbol->next = buckets_[h];
        buckets_[h] = symbol;
      }
    }
  };

  class DeclarativeRegion {
   public:
    DeclarativeRegion* enclosing;
    Scope scope;

    explicit DeclarativeRegion(DeclarativeRegion* enclosing)
      : enclosing(enclosing) {}

    void dump(std::ostream& out, int depth = 0) {
      std::string ind(depth * 2, ' ');
      for (auto sym: scope) {
        if (auto ns = std::get_if<NamespaceData>(&sym->data)) {
          fmt::print("{}- namespace {}\n", ind, toString(sym->name));
          ns->region->dump(out, depth + 1);
        } else if (auto udt = std::get_if<ClassData>(&sym->data)) {
          fmt::print("{}- class {}\n", ind, toString(sym->name));
          udt->region->dump(out, depth + 1);
        }
      }
    }

    struct Context {
      Context(const Context&) = delete;
      Context& operator=(const Context&) = delete;

      Parser* p;
      DeclarativeRegion* savedRegion_;

      explicit Context(Parser* p): p(p), savedRegion_(p->currentRegion_) {}

      ~Context() { p->currentRegion_ = savedRegion_; }

      void enter(DeclarativeRegion* region = nullptr) {
        if (!region)
          region = p->newDeclarativeRegion(savedRegion_);

        p->currentRegion_ = region;
      }

      void leave()
      {
        p->currentRegion_ = savedRegion_;
      }
    };
  };

  DeclarativeRegion* newDeclarativeRegion(DeclarativeRegion* enclosing) {
    return &regions_.emplace_front(DeclarativeRegion(enclosing));
  }

  Symbol* newSymbol() {
    return &symbols_.emplace_front();
  }

  DeclarativeRegion* currentRegion_ = nullptr;
  std::forward_list<DeclarativeRegion> regions_;
  std::forward_list<Symbol> symbols_;

  enum struct Prec {
    kLogicalOr,
    kLogicalAnd,
    kInclusiveOr,
    kExclusiveOr,
    kAnd,
    kEquality,
    kRelational,
    kCompare,
    kShift,
    kAdditive,
    kMultiplicative,
    kPm,
  };

  static Prec prec(TokenKind tk) {
    switch (tk) {
    default:
      std::runtime_error("expected a binary operator");

    case TokenKind::T_DOT_STAR:
    case TokenKind::T_MINUS_GREATER_STAR:
      return Prec::kPm;

    case TokenKind::T_STAR:
    case TokenKind::T_SLASH:
    case TokenKind::T_PERCENT:
      return Prec::kMultiplicative;

    case TokenKind::T_PLUS:
    case TokenKind::T_MINUS:
      return Prec::kAdditive;

    case TokenKind::T_LESS_LESS:
    case TokenKind::T_GREATER_GREATER:
      return Prec::kShift;

    case TokenKind::T_LESS_EQUAL_GREATER:
      return Prec::kCompare;

    case TokenKind::T_LESS_EQUAL:
    case TokenKind::T_GREATER_EQUAL:
    case TokenKind::T_LESS:
    case TokenKind::T_GREATER:
      return Prec::kRelational;

    case TokenKind::T_EQUAL_EQUAL:
    case TokenKind::T_EXCLAIM_EQUAL:
      return Prec::kEquality;

    case TokenKind::T_AMP:
      return Prec::kAnd;

    case TokenKind::T_CARET:
      return Prec::kExclusiveOr;

    case TokenKind::T_BAR:
      return Prec::kInclusiveOr;

    case TokenKind::T_AMP_AMP:
      return Prec::kLogicalAnd;

    case TokenKind::T_BAR_BAR:
      return Prec::kLogicalOr;
    } // switch
  }

  struct DeclaratorId {};
  struct NestedDeclarator {};
  struct PtrDeclarator {};
  struct FunctionDeclarator {};
  struct ArrayDeclarator {};

  using DeclaratorComponent = std::variant<
    DeclaratorId,
    NestedDeclarator,
    PtrDeclarator,
    FunctionDeclarator,
    ArrayDeclarator>;

  using Declarator = std::vector<DeclaratorComponent>;

  bool isFunctionDeclarator(const Declarator& decl) const {
    for (auto d: decl) {
      if (std::holds_alternative<NestedDeclarator>(d))
        continue;
      else if (std::holds_alternative<DeclaratorId>(d))
        continue;
      else if (std::holds_alternative<FunctionDeclarator>(d))
        return true;
      else
        return false;
    }
    return false;
  }

  struct DeclSpecs {
    bool has_simple_typespec = false;
    bool has_complex_typespec = false;
    bool has_named_typespec = false;
    bool has_placeholder_typespec = false;
    bool no_typespecs = false;
    bool no_class_or_enum_specs = false;

    bool accepts_simple_typespec() const {
      return !(has_complex_typespec
        || has_named_typespec
        || has_placeholder_typespec);
    }

    bool has_typespec() const {
      return has_simple_typespec
        || has_complex_typespec
        || has_named_typespec
        || has_placeholder_typespec;
    }
  };

  struct TemplArgContext {
    TemplArgContext(const TemplArgContext&) = delete;
    TemplArgContext& operator=(const TemplArgContext&) = delete;

    Parser* p;

    explicit TemplArgContext(Parser* p): p(p) { ++p->templArgDepth; }
    ~TemplArgContext() { --p->templArgDepth; }
  };

  int templArgDepth = 0;

  template <typename... Args>
  bool parse_warn(const std::string_view& format, const Args&... args)
  {
    unit->report(yycursor, MessageKind::Warning, format, args...);
    return true;
  }

  template <typename... Args>
  bool parse_error(const std::string_view& format, const Args&... args)
  {
    unit->report(yycursor, MessageKind::Error, format, args...);
    return true;
  }

  bool parse_decl_specifier_seq_no_typespecs()
  {
    DeclSpecs specs;
    return parse_decl_specifier_seq_no_typespecs(specs);
  }

  bool parse_decl_specifier_seq()
  {
    DeclSpecs specs;
    return parse_decl_specifier_seq(specs);
  }

  bool parse_declarator()
  {
    Declarator decl;
    return parse_declarator(decl);
  }

  bool yyparse(TranslationUnit* unit, const std::function<void()>& consume);

  const Token& LA(int n = 0) const
  {
    return unit->tokenAt(yycursor + n);
  }

  bool match(TokenKind tk)
  {
    if (yytoken() != tk) return false;
    yyconsume();
    return true;
  }

  bool expect(TokenKind tk)
  {
    if (match(tk)) return true;
    parse_error("expected '{}'", Token::spell(tk));
    return false;
  }

  TranslationUnit* unit = nullptr;
  Arena* pool = nullptr;
  Control* control = nullptr;
  bool skip_function_body = false;
  std::unordered_map<uint32_t, std::tuple<uint32_t, bool>> class_specifiers_;
  std::unordered_map<uint32_t, std::tuple<uint32_t, bool, DeclarativeRegion*>> nested_name_specifiers_;
  bool module_unit = false;
  const Identifier* module_id = nullptr;
  const Identifier* import_id = nullptr;
  const Identifier* final_id = nullptr;
  const Identifier* override_id = nullptr;
  DeclarativeRegion* globalRegion = nullptr;
%}

%token
  eof_symbol
, error
, identifier
, character_literal
, floating_point_literal
, integer_literal
, string_literal
, user_defined_literal
, user_defined_string_literal

// operators and punctuators

, exclaim
, exclaim_equal
, percent
, percent_equal
, amp
, amp_amp
, amp_equal
, lparen
, rparen
, star
, star_equal
, plus
, plus_plus
, plus_equal
, comma
, minus
, minus_minus
, minus_equal
, minus_greater
, minus_greater_star
, dot
, dot_star
, dot_dot_dot
, slash
, slash_equal
, colon
, colon_colon
, semicolon
, less
, less_less
, less_less_equal
, less_equal
, less_equal_greater
, equal
, equal_equal
, greater
, question
, lbracket
, rbracket
, caret
, caret_equal
, lbrace
, bar
, bar_equal
, bar_bar
, rbrace
, tilde

// keywords

, __alignof
, __asm
, __asm__
, __attribute
, __attribute__
, __complex__
, __decltype
, __decltype__
, __extension__
, __float128
, __float80
, __has_unique_object_representations
, __has_virtual_destructor
, __imag__
, __inline
, __inline__
, __int128
, __int64
, __is_abstract
, __is_aggregate
, __is_base_of
, __is_class
, __is_constructible
, __is_convertible_to
, __is_empty
, __is_enum
, __is_final
, __is_function
, __is_literal
, __is_nothrow_assignable
, __is_nothrow_constructible
, __is_pod
, __is_polymorphic
, __is_same
, __is_standard_layout
, __is_trivial
, __is_trivially_assignable
, __is_trivially_constructible
, __is_trivially_copyable
, __is_trivially_destructible
, __is_union
, __real__
, __reference_binds_to_temporary
, __restrict
, __restrict__
, __thread
, __typeof
, __typeof__
, __underlying_type

, _Atomic

, alignas
, alignof
, asm
, auto
, bool
, break
, case
, catch
, char
, char16_t
, char32_t
, char8_t
, class
, co_await
, co_return
, co_yield
, concept
, const
, const_cast
, consteval
, constexpr
, constinit
, continue
, decltype
, default
, delete
, do
, double
, dynamic_cast
, else
, enum
, explicit
, export
, extern
, false
, float
, for
, friend
, goto
, if
, inline
, int
, long
, mutable
, namespace
, new
, noexcept
, nullptr
, operator
, private
, protected
, public
, reinterpret_cast
, requires
, return
, short
, signed
, sizeof
, static
, static_assert
, static_cast
, struct
, switch
, template
, this
, thread_local
, throw
, true
, try
, typedef
, typeid
, typename
, union
, unsigned
, using
, virtual
, void
, volatile
, wchar_t
, while

// module
, import
, module

%extern warn
%extern error

id(const Identifier* id): identifier
{
  return unit->identifier(yycursor - 1) == id;
};

nospace:
{
  const auto& tk = unit->tokenAt(yycursor);
  return !tk.leadingSpace() && !tk.startOfLine();
};

greater_greater
: greater_greater_equal { return false; }
| greater nospace greater;

greater_greater_equal: greater nospace greater nospace equal;

greater_equal: greater nospace equal;

header_name: { return false; };

export_keyword
: { return module_unit; }
  export
;

import_keyword
: import
| { return module_unit; }
  id(import_id)
  { unit->setTokenKind(yycursor - 1, TokenKind::T_MODULE); }
;

module_keyword
: module
| { return unit; }
  id(module_id)
  { unit->setTokenKind(yycursor - 1, TokenKind::T_MODULE); }
;

final: id(final_id);

override: id(override_id);

typedef_name
: simple_template_id
| identifier
;

namespace_name
: identifier
| namespace_alias
;

namespace_alias
: identifier
;

class_name
{
  Name name;
}
: class_name(name)
;

class_name(Name& name)
: simple_template_id(name)
| name_id(name)
;

name_id(Name& name)
: identifier
  { name = unit->identifier(yycursor - 1); }
;

enum_name
: identifier
;

template_name
{
  Name name;
}
: template_name(name)
;

template_name(Name& name)
: name_id(name)
;

literal: {
  switch (yytoken()) {
  case TokenKind::T_TRUE:
  case TokenKind::T_FALSE:
  case TokenKind::T_NULLPTR:
  case TokenKind::T_INTEGER_LITERAL:
  case TokenKind::T_CHARACTER_LITERAL:
  case TokenKind::T_FLOATING_POINT_LITERAL:
  case TokenKind::T_USER_DEFINED_LITERAL:
    yyconsume();
    return true;
  case TokenKind::T_STRING_LITERAL:
    while (match(TokenKind::T_STRING_LITERAL)) {

    }
    return true;
  default:
    return false;
  } // switch
}
;

translation_unit(UnitAST*& yyast)
: eof_symbol
| module_unit(yyast)
| top_level_declaration_seq(yyast)
    // { globalRegion->dump(std::cout); }
;

enter(DeclarativeRegion::Context& context)
: { context.enter(); }
;

leave(DeclarativeRegion::Context& context)
: { context.leave(); }
;

module_unit(UnitAST*& yyast)
{
  DeclarativeRegion::Context region(this);

  globalRegion = newDeclarativeRegion(nullptr);

  region.enter(globalRegion);

  module_unit = true;
}
: global_module_fragment? module_declaration declaration_seq? private_module_fragment? eof
;

eof
: eof_symbol
| error("expected eof")
;

top_level_declaration_seq(UnitAST*& yyast): {
  DeclarativeRegion::Context region(this);

  globalRegion = newDeclarativeRegion(nullptr);

  region.enter(globalRegion);

  bool skipping = false;

  module_unit = false;

  DeclarationAST* d1 = nullptr;

  while (yytoken() != TokenKind::T_EOF_SYMBOL) {
    auto saved = yycursor;
    DeclarationAST* declaration = nullptr;
    if (parse_declaration(declaration)) {
      skipping = false;
    } else {
      parse_skip_top_level_declaration(skipping);
      if (yycursor == saved)
        yyconsume();
    }
  }
};

skip_top_level_declaration(bool& skipping): {
  if (yytoken() == TokenKind::T_EOF_SYMBOL) return false;
  if (!skipping) unit->report(yycursor, MessageKind::Error, "expected a declaration");
  skipping = true;
};

declaration_seq: {
  bool skipping = false;
  while (yytoken() != TokenKind::T_EOF_SYMBOL) {
    if (yytoken() == TokenKind::T_RBRACE) break;
    auto saved = yycursor;
    DeclarationAST* decl = nullptr;
    if (parse_declaration(decl)) {
      skipping = false;
    } else {
      parse_skip_declaration(skipping);
      if (yycursor == saved)
        yyconsume();
    }
  }
};

skip_declaration(bool& skipping): {
  if (yytoken() == TokenKind::T_RBRACE) return false;
  if (yytoken() == TokenKind::T_MODULE) return false;
  if (module_unit && yytoken() == TokenKind::T_EXPORT) return false;
  if (yytoken() == TokenKind::T_IMPORT) return false;
  if (!skipping) unit->report(yycursor, MessageKind::Error, "expected a declaration");
  skipping = true;
};

primary_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: literal
| this
| lparen expression(e1) rparen
| id_expression
| lambda_expression(yyast)
| fold_expression(yyast)
| requires_expression(yyast)
;

id_expression
: qualified_id
| unqualified_id
;

unqualified_id
: template_id
| tilde type_name
| tilde decltype_specifier
| identifier
| operator_function_id
| conversion_function_id
| literal_operator_id
;

qualified_id
: nested_name_specifier template? unqualified_id
;

nested_name_specifier
{
  DeclarativeRegion* region = nullptr;
}
: nested_name_specifier(region)
;

nested_name_specifier(DeclarativeRegion*& region)
{
  const auto start = yycursor;
  auto it = nested_name_specifiers_.find(start);
  if (it != nested_name_specifiers_.end()) {
    auto [cursor, parsed, result] = it->second;
    yyrewind(cursor);
    region = result;
    return parsed;
  }
  struct Context {
    Parser* p;
    uint32_t start;
    bool parsed = false;
    DeclarativeRegion* region = nullptr;
    Context(Parser *p): p(p), start(p->yycursor) {}
    ~Context() {
      p->nested_name_specifiers_.emplace(start, std::make_tuple(p->yycursor, parsed, region));
    }
  } context(this);
  Symbol* sym = nullptr;
  region = currentRegion_;
  Name id;
}
: ( colon_colon
  | name_id(id) colon_colon
  | simple_template_id(id) colon_colon
  | decltype_specifier colon_colon)
      ( name_id(id) colon_colon
      | template? simple_template_id(id) colon_colon
      )*
    {
      context.parsed = true;
      context.region = region;
    }
;

lambda_expression(ExpressionAST*& yyast)
{
  DeclarativeRegion::Context region(this);
  StatementAST* s1 = nullptr;
}
: lambda_introducer less enter(region) template_parameter_list greater requires_clause? lambda_declarator? compound_statement(s1)
| lambda_introducer lambda_declarator? compound_statement(s1)
;

lambda_introducer
: lbracket lambda_capture? rbracket
;

lambda_declarator
: lparen parameter_declaration_clause rparen decl_specifier_seq? noexcept_specifier? attribute_specifier_seq? trailing_return_type? requires_clause?
;

lambda_capture
: capture_list
| capture_default (comma capture_list)*
;

capture_default
: amp
| equal
;

capture_list
: capture (comma capture)*
;

capture
: init_capture
| simple_capture
;

simple_capture
: identifier dot_dot_dot?
| amp identifier dot_dot_dot?
| this
| star this
;

init_capture
: dot_dot_dot? identifier initializer
| amp dot_dot_dot? identifier initializer
;

fold_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
  ExpressionAST* e2 = nullptr;
}
: lparen cast_expression(e1) fold_operator dot_dot_dot (fold_operator cast_expression(e2))? rparen
| lparen dot_dot_dot fold_operator cast_expression(e1) rparen
;

fold_operator
: plus
| minus
| star
| slash
| percent
| caret
| amp
| bar
| less_less
| plus_equal
| minus_equal
| star_equal
| slash_equal
| percent_equal
| caret_equal
| amp_equal
| bar_equal
| less_less_equal
| greater_greater_equal
| greater_greater
| greater_equal
| greater
| equal
| equal_equal
| exclaim_equal
| less
| less_equal
| amp_amp
| bar_bar
| comma
| dot_star
| minus_greater_star
;

requires_expression(ExpressionAST*& yyast)
: requires requirement_parameter_list? requirement_body
;

requirement_parameter_list
: lparen parameter_declaration_clause? rparen
;

requirement_body
: lbrace requirement_seq rbrace
;

requirement_seq
: requirement+;

requirement
: simple_requirement
| type_requirement
| compound_requirement
| nested_requirement
;

simple_requirement
{
  ExpressionAST* e1 = nullptr;
}
: expression(e1) semicolon
;

type_requirement
: typename nested_name_specifier? type_name semicolon
;

compound_requirement
{
  ExpressionAST* e1 = nullptr;
}
: lbrace expression(e1) rbrace noexcept? return_type_requirement? semicolon
;

return_type_requirement
: minus_greater type_constraint
;

nested_requirement
{
  ExpressionAST* e1 = nullptr;
}
: requires constraint_expression(e1) semicolon
;

postfix_expression(ExpressionAST*& yyast)
{
  DeclSpecs specs;
  ExpressionAST* e1 = nullptr;
}
: ( const_cast less type_id greater lparen expression(e1) rparen
  | dynamic_cast less type_id greater lparen expression(e1) rparen
  | reinterpret_cast less type_id greater lparen expression(e1) rparen
  | simple_type_specifier(specs) ( braced_init_list
                                 | lparen expression_list? rparen)
  | static_cast less type_id greater lparen expression(e1) rparen
  | typeid lparen expression(e1) rparen
  | typeid lparen type_id rparen
  | typename_specifier braced_init_list
  | typename_specifier lparen expression_list? rparen
  | __has_unique_object_representations lparen type_id rparen
  | __has_virtual_destructor lparen type_id rparen
  | __is_abstract lparen type_id rparen
  | __is_aggregate lparen type_id rparen
  | __is_base_of lparen type_id comma type_id rparen
  | __is_class lparen type_id rparen
  | __is_constructible lparen type_id comma type_id rparen
  | __is_convertible_to lparen type_id comma type_id rparen
  | __is_empty lparen type_id rparen
  | __is_enum lparen type_id rparen
  | __is_final lparen type_id rparen
  | __is_function lparen type_id rparen
  | __is_nothrow_assignable lparen type_id comma type_id rparen
  | __is_nothrow_constructible lparen type_id comma type_id rparen
  | __is_pod lparen type_id rparen
  | __is_polymorphic lparen type_id rparen
  | __is_same lparen type_id comma type_id rparen
  | __is_standard_layout lparen type_id rparen
  | __is_trivial lparen type_id rparen
  | __is_trivially_assignable lparen type_id comma type_id rparen
  | __is_trivially_constructible lparen type_id comma type_id rparen
  | __is_trivially_copyable lparen type_id rparen
  | __is_trivially_destructible lparen type_id rparen
  | __is_union lparen type_id rparen
  | __reference_binds_to_temporary lparen type_id comma type_id rparen
  | primary_expression(yyast))
    ( dot template? id_expression
    | lbracket expr_or_braced_init_list rbracket
    | lparen expression_list? rparen
    | minus_greater template? id_expression
    | minus_minus
    | plus_plus)*
;

expression_list
: initializer_list
;

unary_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: unary_operator cast_expression(e1)
| plus_plus cast_expression(e1)
| minus_minus cast_expression(e1)
| __imag__ cast_expression(e1)
| __real__ cast_expression(e1)
| await_expression(yyast)
| sizeof unary_expression(e1)
| sizeof lparen type_id rparen
| sizeof dot_dot_dot lparen identifier rparen
| alignof lparen type_id rparen
| __alignof lparen type_id rparen
| noexcept_expression(yyast)
| new_expression(yyast)
| delete_expression(yyast)
| postfix_expression(yyast)
;

unary_operator
: star
| amp
| plus
| minus
| exclaim
| tilde
;

await_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: co_await cast_expression(e1)
;

noexcept_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: noexcept lparen expression(e1) rparen
;

new_expression(ExpressionAST*& yyast)
: colon_colon? new new_placement? new_type_id new_initializer?
| colon_colon? new new_placement? lparen type_id rparen new_initializer?
;

new_placement
: lparen expression_list rparen
;

new_type_id
: type_specifier_seq new_declarator?
;

new_declarator
: ptr_operator new_declarator?
| noptr_new_declarator
;

noptr_new_declarator
{
  ExpressionAST* e1 = nullptr;
  ExpressionAST* e2 = nullptr;
}
: lbracket expression(e1)? rbracket attribute_specifier_seq? (lbracket constant_expression(e2) rbracket attribute_specifier_seq?)*
;

new_initializer
: lparen expression_list? rparen
| braced_init_list
;

delete_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: colon_colon? delete cast_expression(e1)
| colon_colon? delete lbracket rbracket cast_expression(e1)
;

cast_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: lparen type_id rparen cast_expression(e1)
| unary_expression(yyast)
;

binary_operator(TokenKind& tk, bool templArg)
: greater_equal
| greater_greater
    {
      if (templArg && templArgDepth >= 2)
        return false;
      tk = TokenKind::T_GREATER_GREATER;
    }
| ( star
  | slash
  | plus
  | percent
  | minus_greater_star
  | minus
  | less_less
  | less_equal_greater
  | less_equal
  | less
  | { return !templArg; } greater
  | exclaim_equal
  | equal_equal
  | dot_star
  | caret
  | bar_bar
  | bar
  | amp_amp
  | amp ) { tk = unit->tokenKind(yycursor - 1); }
;

binary_expression(ExpressionAST*& yyast, bool templArg)
: cast_expression(yyast) binary_expression_helper(yyast, Prec::kLogicalOr, templArg)?
;

binary_expression_helper(ExpressionAST*& yyast, Prec minPrec, bool templArg)
{
  TokenKind op = TokenKind::T_EOF_SYMBOL;
  TokenKind nextOp = TokenKind::T_EOF_SYMBOL;
  ExpressionAST* rhs = nullptr;
}
: (binary_operator(op, templArg) { return prec(op) >= minPrec; }
    cast_expression(rhs)
    ({} / (binary_operator(nextOp, templArg) { return prec(nextOp) > prec(op); })
      binary_expression_helper(rhs, prec(op), templArg)
    )*
  )+
;

logical_or_expression(ExpressionAST*& yyast, bool templArg)
: binary_expression(yyast, templArg)
;

conditional_expression(ExpressionAST*& yyast, bool templArg)
{
  ExpressionAST* e1 = nullptr;
  ExpressionAST* e2 = nullptr;
}
: logical_or_expression(yyast, templArg) (question expression(e1) colon assignment_expression(e2))?
;

yield_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: co_yield assignment_expression(e1)
| co_yield braced_init_list
;

throw_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: throw assignment_expression(e1)?
;

assignment_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
  ExpressionAST* e2 = nullptr;
}
: yield_expression(yyast)
| throw_expression(yyast)
| logical_or_expression(yyast, false)
    ( assignment_operator initializer_clause(e1)
    | question expression(e1) colon assignment_expression(e2))?
;

assignment_operator
: equal
| star_equal
| slash_equal
| percent_equal
| plus_equal
| minus_equal
| greater_greater_equal
| less_less_equal
| amp_equal
| caret_equal
| bar_equal
;

expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: assignment_expression(yyast) (comma assignment_expression(e1))*
;

constant_expression(ExpressionAST*& yyast)
: conditional_expression(yyast, false)
;

template_argument_constant_expression(ExpressionAST*& yyast)
: conditional_expression(yyast, true)
;

statement(StatementAST*& yyast):
{
  bool has_extension = false;

  if (match(TokenKind::T___EXTENSION__)) {
    has_extension = false;
  }

  bool has_attribute_specifiers = false;

  if (parse_attribute_specifier_seq()) {
    has_attribute_specifiers = true;
  }

  const auto start = yycursor;

  switch (yytoken()) {
    case TokenKind::T_CASE:
      return parse_case_statement(yyast);
    case TokenKind::T_DEFAULT:
      return parse_default_statement(yyast);
    case TokenKind::T_WHILE:
      return parse_while_statement(yyast);
    case TokenKind::T_DO:
      return parse_do_statement(yyast);
    case TokenKind::T_FOR:
      if (parse_for_range_statement(yyast))
        return true;
      yyrewind(start);
      return parse_for_statement(yyast);
    case TokenKind::T_IF:
      return parse_if_statement(yyast);
    case TokenKind::T_SWITCH:
      return parse_switch_statement(yyast);
    case TokenKind::T_BREAK:
      return parse_break_statement(yyast);
    case TokenKind::T_CONTINUE:
      return parse_continue_statement(yyast);
    case TokenKind::T_RETURN:
      return parse_return_statement(yyast);
    case TokenKind::T_GOTO:
      return parse_goto_statement(yyast);
    case TokenKind::T_CO_RETURN:
      return parse_coroutine_return_statement(yyast);
    case TokenKind::T_TRY:
      return parse_try_block(yyast);
    case TokenKind::T_LBRACE:
      return parse_compound_statement(yyast);
    default:
      if (yytoken() == TokenKind::T_IDENTIFIER && yytoken(1) == TokenKind::T_COLON) {
        return parse_labeled_statement(yyast);
      } else if (parse_declaration_statement(yyast)) {
        return true;
      }
      return parse_expression_statement(yyast);
  } // switch
};

init_statement(StatementAST*& yyast): {
  if (yytoken() == TokenKind::T_RPAREN)
    return false;
  auto saved = yycursor;
  DeclarationAST* declaration = nullptr;
  if (parse_simple_declaration(declaration, false))
    return true;
  yyrewind(saved);
  ExpressionAST* expression = nullptr;
  if (!parse_expression(expression))
    return false;
  if (!match(TokenKind::T_SEMICOLON))
    return false;
};

condition(ExpressionAST*& yyast)
: attribute_specifier_seq? decl_specifier_seq declarator brace_or_equal_initializer
| expression(yyast)
;

labeled_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_IDENTIFIER))
    return false;
  expect(TokenKind::T_COLON);
  StatementAST* statement = nullptr;
  if (!parse_statement(statement))
    parse_error("expected a statement");
};

case_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_CASE))
    return false;
  ExpressionAST* expression = nullptr;
  if (!parse_constant_expression(expression))
    parse_error("expected an expression");
  expect(TokenKind::T_COLON);
  StatementAST* statement = nullptr;
  if (!parse_statement(statement))
    parse_error("expected a statement");
};

default_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_DEFAULT))
    return false;
  expect(TokenKind::T_COLON);
  StatementAST* statement = nullptr;
  if (!parse_statement(statement))
    parse_error("expected a statement");
};

expression_statement(StatementAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: expression(e1)? semicolon
;

expression_statement0(StatementAST*& yyast): {
  if (!match(TokenKind::T_SEMICOLON)) {
    ExpressionAST* expression = nullptr;
    if (!parse_expression(expression))
      return false;
    expect(TokenKind::T_SEMICOLON);
  }
};

compound_statement(StatementAST*& yyast): {
  DeclarativeRegion::Context region(this);
  bool skipping = false;
  if (!match(TokenKind::T_LBRACE)) return false;
  parse_enter(region);
  while (auto tk = LA()) {
    if (yytoken() == TokenKind::T_RBRACE)
      break;
    StatementAST* s = nullptr;
    if (parse_statement(s)) {
      skipping = false;
    } else {
      parse_skip_statement(skipping);
    }
  }
  if (!expect(TokenKind::T_RBRACE)) return false;
  return true;
};

skip_statement(bool& skipping): {
  if (yytoken() == TokenKind::T_EOF_SYMBOL) return false;
  if (yytoken() == TokenKind::T_RBRACE) return false;
  if (!skipping) unit->report(yycursor, MessageKind::Error, "expected a statement");
  for (; yytoken() != TokenKind::T_EOF_SYMBOL; yyconsume()) {
    if (yytoken() == TokenKind::T_SEMICOLON) break;
    if (yytoken() == TokenKind::T_LBRACE) break;
    if (yytoken() == TokenKind::T_RBRACE) break;
  }
  skipping = true;
};

if_statement(StatementAST*& yyast):
{
  if (!match(TokenKind::T_IF)) return false;
  bool has_constexpr = match(TokenKind::T_CONSTEXPR);
  expect(TokenKind::T_LPAREN);
  auto start = yycursor;
  StatementAST* initializer = nullptr;
  if (!parse_init_statement(initializer))
    yyrewind(start);
  ExpressionAST* condition = nullptr;
  parse_condition(condition);
  expect(TokenKind::T_RPAREN);
  StatementAST* statement = nullptr;
  if (!parse_statement(statement))
    parse_error("expected a statement");
  if (match(TokenKind::T_ELSE)) {
    StatementAST* else_statement = nullptr;
    if (!parse_statement(else_statement))
      parse_error("expected a statement");
  }
};

switch_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_SWITCH))
    return false;
  expect(TokenKind::T_LPAREN);
  StatementAST* initializer = nullptr;
  auto start = yycursor;
  if (!parse_init_statement(initializer))
    yyrewind(start);
  ExpressionAST* condition = nullptr;
  parse_condition(condition);
  expect(TokenKind::T_RPAREN);
  StatementAST* statement = nullptr;
  parse_statement(statement);
};

while_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_WHILE))
    return false;
  expect(TokenKind::T_LPAREN);
  ExpressionAST* condition = nullptr;
  if (!parse_condition(condition))
    parse_error("expected a condition");
  expect(TokenKind::T_RPAREN);
  StatementAST* statement = nullptr;
  if (!parse_statement(statement))
    parse_error("expected a statement");
};

do_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_DO))
    return false;
  StatementAST* statement = nullptr;
  if (!parse_statement(statement))
    parse_error("expected a statement");
  expect(TokenKind::T_WHILE);
  expect(TokenKind::T_LPAREN);
  ExpressionAST* expression = nullptr;
  if (!parse_expression(expression))
    parse_error("expected an expression");
  expect(TokenKind::T_RPAREN);
};

for_range_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_FOR))
    return false;
  if (!match(TokenKind::T_LPAREN))
    return false;
  auto saved = yycursor;
  StatementAST* initializer = nullptr;
  if (!parse_init_statement(initializer))
    yyrewind(saved);
  if (!parse_for_range_declaration())
    return false;
  if (!match(TokenKind::T_COLON))
    return false;
  if (!parse_for_range_initializer())
    parse_error("expected for-range intializer");
  expect(TokenKind::T_RPAREN);
  StatementAST* statement = nullptr;
  if (!parse_statement(statement))
    parse_error("expected a statement");
};

for_statement(StatementAST*& yyast): {
  StatementAST* s1 = nullptr;
  StatementAST* s2 = nullptr;
  ExpressionAST* e1 = nullptr;
  ExpressionAST* e2 = nullptr;
  if (!match(TokenKind::T_FOR))
    return false;
  expect(TokenKind::T_LPAREN);
  if (!parse_init_statement(s1))
    parse_error("expected a statement");
  if (!match(TokenKind::T_SEMICOLON)) {
    if (!parse_condition(e1))
      parse_error("expected a condition");
    expect(TokenKind::T_SEMICOLON);
  }
  if (!match(TokenKind::T_RPAREN)) {
    if (!parse_expression(e2))
      parse_error("expected an expression");
    expect(TokenKind::T_RPAREN);
  }
  if (!parse_statement(s2))
    parse_error("expected a statement");
};

for_range_declaration
: attribute_specifier_seq? decl_specifier_seq ( ref_qualifier? lbracket identifier_list rbracket
                                              | declarator)
;

for_range_initializer
: expr_or_braced_init_list
;

break_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_BREAK))
    return false;
  expect(TokenKind::T_SEMICOLON);
};

continue_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_CONTINUE))
    return false;
  expect(TokenKind::T_SEMICOLON);
};

return_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_RETURN))
    return false;
  if (!match(TokenKind::T_SEMICOLON)) {
    if (!parse_expr_or_braced_init_list())
      parse_error("expected an expression or ';'");
    expect(TokenKind::T_SEMICOLON);
  }
};

goto_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_GOTO))
    return false;
  expect(TokenKind::T_IDENTIFIER);
  expect(TokenKind::T_SEMICOLON);
};

coroutine_return_statement(StatementAST*& yyast): {
  if (!match(TokenKind::T_CO_RETURN))
    return false;
  if (!match(TokenKind::T_SEMICOLON)) {
    if (!parse_expr_or_braced_init_list())
      parse_error("expected an expression");
    expect(TokenKind::T_SEMICOLON);
  }
};

declaration_statement(StatementAST*& yyast)
{
  DeclarationAST* d1 = nullptr;
}
: block_declaration(d1, false)
;

declaration(DeclarationAST*& yyast)
{
  if (yytoken() == TokenKind::T_RBRACE)
    return false;
  else if (parse_module_keyword())
    return false;
}
: empty_declaration(yyast)
| block_declaration(yyast, true)
| explicit_instantiation(yyast)
| explicit_specialization(yyast)
| template_declaration(yyast)
| deduction_guide(yyast)
| export_declaration(yyast)
| linkage_specification(yyast)
| namespace_definition(yyast)
| attribute_declaration(yyast)
| module_import_declaration(yyast)
;

block_declaration(DeclarationAST*& yyast, bool fundef)
: simple_declaration(yyast, fundef)
| asm_declaration(yyast)
| namespace_alias_definition(yyast)
| using_declaration(yyast)
| using_enum_declaration(yyast)
| using_directive(yyast)
| static_assert_declaration(yyast)
| alias_declaration(yyast)
| opaque_enum_declaration(yyast)
;

alias_declaration(DeclarationAST*& yyast)
: using identifier attribute_specifier_seq? equal defining_type_id semicolon
;

simple_declaration(DeclarationAST*& yyast, bool fundef)
{
  DeclSpecs specs;
  Declarator decl;
}
: __extension__? attribute_specifier_seq?
    ( semicolon
    | decl_specifier_seq_no_typespecs(specs)?
        ( declarator_id attribute_specifier_seq? parameters_and_qualifiers (semicolon | function_definition_body)
        | decl_specifier_seq(specs)?
          ({ return specs.has_complex_typespec; } semicolon
          |{ return specs.has_typespec(); } ref_qualifier? lbracket identifier_list rbracket initializer semicolon
          |{ return specs.has_typespec(); } declarator(decl)
              ( semicolon
              | { return isFunctionDeclarator(decl); } function_definition_body
              | declarator_initializer? (comma init_declarator)* semicolon)
              )))
;

function_definition_body
: (requires_clause | virt_specifier_seq?) function_body
;

static_assert_declaration(DeclarationAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: static_assert lparen constant_expression(e1) (comma string_literal_seq)? rparen semicolon
;

string_literal_seq
: string_literal+;

empty_declaration(DeclarationAST*& yyast)
: semicolon
;

attribute_declaration(DeclarationAST*& yyast)
: attribute_specifier_seq semicolon
;

decl_specifier(DeclSpecs& specs)
: storage_class_specifier
| { return !specs.no_typespecs; } defining_type_specifier(specs)
| function_specifier
| friend
| typedef
| constexpr
| consteval
| constinit
| inline
| __inline
| __inline__
;

decl_specifier_seq(DeclSpecs& specs)
{
  specs.no_typespecs = false;
}
: (decl_specifier(specs) attribute_specifier_seq?)+
;

decl_specifier_seq_no_typespecs(DeclSpecs& specs)
{
  specs.no_typespecs = true;
}
: (decl_specifier(specs) attribute_specifier_seq?)+
;

storage_class_specifier
: static
| thread_local
| extern
| mutable
| __thread
;

function_specifier
: virtual
| explicit_specifier
;

explicit_specifier
{
  ExpressionAST* e1 = nullptr;
}
: explicit lparen constant_expression(e1) rparen
| explicit
;

type_specifier(DeclSpecs& specs)
: simple_type_specifier(specs)
| elaborated_type_specifier(specs)
| typename_specifier { specs.has_named_typespec = true; }
| cv_qualifier
;

type_specifier_seq
{
  DeclSpecs specs;
  specs.no_class_or_enum_specs = true;
}
: (type_specifier(specs) attribute_specifier_seq?)+
;

defining_type_specifier(DeclSpecs& specs)
: { return !specs.no_class_or_enum_specs; } class_specifier { specs.has_complex_typespec = true; }
| { return !specs.no_class_or_enum_specs; } enum_specifier  { specs.has_complex_typespec = true; }
| type_specifier(specs)
;

defining_type_specifier_seq(DeclSpecs& specs)
: defining_type_specifier(specs)+ attribute_specifier_seq?
;

simple_type_specifier(DeclSpecs& specs)
: { return !specs.has_typespec(); }
  ( nested_name_specifier ( template simple_template_id
                          | type_name
                          | template_name)
  | type_name
  | template_name) { specs.has_named_typespec = true; }

| { return !specs.has_typespec(); }
  placeholder_type_specifier { specs.has_placeholder_typespec = true; }

| { return !specs.has_typespec(); }
  decltype_specifier { specs.has_placeholder_typespec = true; }

| { return !specs.has_typespec(); }
  __underlying_type lparen type_id rparen
  { specs.has_named_typespec = true; }

| { return specs.accepts_simple_typespec(); }
  _Atomic lparen type_id rparen

| { return specs.accepts_simple_typespec(); }
  ( char
  | char8_t
  | char16_t
  | char32_t
  | wchar_t
  | bool
  | short
  | int
  | long
  | signed
  | unsigned
  | float
  | double
  | void
  | __int64
  | __int128
  | __float80
  | __float128
  | __complex__
  ) { specs.has_simple_typespec = true; }
;

type_name
: class_name
| enum_name
| typedef_name
;

elaborated_type_specifier(DeclSpecs& specs)
: class_key attribute_specifier_seq? nested_name_specifier template? simple_template_id
  { specs.has_complex_typespec = true; }
| class_key attribute_specifier_seq? simple_template_id
  { specs.has_complex_typespec = true; }
| class_key attribute_specifier_seq? nested_name_specifier? identifier
  { specs.has_complex_typespec = true; }
| elaborated_enum_specifier
  { specs.has_complex_typespec = true; }
;

elaborated_enum_specifier
: enum nested_name_specifier? identifier
;

decltype_specifier
{
  ExpressionAST* e1 = nullptr;
}
: decltype lparen expression(e1) rparen
| (__decltype | __decltype__) lparen expression(e1) rparen
| (__typeof | __typeof__) lparen expression(e1) rparen
;

placeholder_type_specifier
: type_constraint? auto
| type_constraint? decltype lparen auto rparen
;

init_declarator_list
: init_declarator (comma init_declarator)*
;

init_declarator
: declarator declarator_initializer?
;

declarator_initializer
: requires_clause
| initializer
;

declarator(Declarator& decl)
: ptr_operator declarator(decl) { decl.push_back(PtrDeclarator()); }
| noptr_declarator(decl)
;

ptr_operator_seq
: ptr_operator+;

core_declarator(Declarator& decl)
: declarator_id attribute_specifier_seq? { decl.push_back(DeclaratorId()); }
| lparen declarator(decl) rparen { decl.push_back(NestedDeclarator()); }
;

noptr_declarator(Declarator& decl)
{
  ExpressionAST* e1 = nullptr;
}
: core_declarator(decl)
    ( parameters_and_qualifiers trailing_return_type?
        { decl.push_back(FunctionDeclarator()); }
    | lbracket constant_expression(e1)? rbracket attribute_specifier_seq?
        { decl.push_back(ArrayDeclarator()); }
    )*
;

parameters_and_qualifiers
{
  DeclarativeRegion::Context region(this);
}
: lparen enter(region) parameter_declaration_clause rparen cv_qualifier_seq? ref_qualifier? noexcept_specifier? attribute_specifier_seq?
;

cv_qualifier_seq
: cv_qualifier+;

trailing_return_type
: minus_greater type_id
;

ptr_operator
: star attribute_specifier_seq? cv_qualifier_seq?
| amp attribute_specifier_seq?
| amp_amp attribute_specifier_seq?
| nested_name_specifier star attribute_specifier_seq? cv_qualifier_seq?
;

cv_qualifier
: const
| volatile
| __restrict
| __restrict__
;

ref_qualifier
: amp
| amp_amp
;

declarator_id
: dot_dot_dot? id_expression
;

type_id
: type_specifier_seq abstract_declarator?
;

defining_type_id
{
  DeclSpecs specs;
  specs.no_class_or_enum_specs = true;
}
: defining_type_specifier_seq(specs) abstract_declarator?
;

abstract_declarator
: noptr_abstract_declarator? parameters_and_qualifiers trailing_return_type
| abstract_pack_declarator
| ptr_abstract_declarator
;

ptr_abstract_declarator
: ptr_operator_seq? noptr_abstract_declarator
;

noptr_abstract_declarator
{
  ExpressionAST* e1 = nullptr;
}
: (lparen ptr_abstract_declarator rparen)?
    ( parameters_and_qualifiers
    | lbracket constant_expression(e1)? rbracket attribute_specifier_seq?)*
;

abstract_pack_declarator
: ptr_operator_seq? noptr_abstract_pack_declarator
;

noptr_abstract_pack_declarator
{
  ExpressionAST* e1 = nullptr;
}
: dot_dot_dot
    ( parameters_and_qualifiers
    | lbracket constant_expression(e1)? rbracket attribute_specifier_seq?)*
;

parameter_declaration_clause
: parameter_declaration_list comma? dot_dot_dot?
| dot_dot_dot?
;

parameter_declaration_list
: parameter_declaration (comma parameter_declaration)*
;

parameter_declaration
{
  DeclSpecs specs;
  specs.no_class_or_enum_specs = true;

  ExpressionAST* e1 = nullptr;
}
: attribute_specifier_seq? decl_specifier_seq(specs)
    ( declarator (equal initializer_clause(e1))?
    | abstract_declarator? (equal initializer_clause(e1))?)
;

initializer
: brace_or_equal_initializer
| lparen expression_list rparen
;

brace_or_equal_initializer
{
  ExpressionAST* e1 = nullptr;
}
: equal initializer_clause(e1)
| braced_init_list
;

initializer_clause(ExpressionAST*& yyast)
: braced_init_list
| assignment_expression(yyast)
;

braced_init_list
: {
  if (!match(TokenKind::T_LBRACE)) return false;

  if (yytoken() == TokenKind::T_DOT) {
    if (!parse_designated_initializer_clause())
      parse_error("expected designated initializer clause");

    while (match(TokenKind::T_COMMA)) {
      if (yytoken() == TokenKind::T_RBRACE) break;

      if (!parse_designated_initializer_clause())
        parse_error("expected designated initializer clause");
    }
  } else if (match(TokenKind::T_COMMA)) {
    // nothing to do
  } else if (yytoken() != TokenKind::T_RBRACE) {
    if (!parse_initializer_list())
      parse_error("expected initializer list");
  }

  expect(TokenKind::T_RBRACE);
};

initializer_list: {
  ExpressionAST* e = 0;

  if (!parse_initializer_clause(e))
    return false;

  bool has_triple_dot = false;
    if (match(TokenKind::T_DOT_DOT_DOT)) {
    has_triple_dot = true;
  }

  while (match(TokenKind::T_COMMA)) {
    if (yytoken() == TokenKind::T_RBRACE) break;

    ExpressionAST* e = 0;
    if (!parse_initializer_clause(e))
      parse_error("expected initializer clause");

    bool has_triple_dot = false;
    if (match(TokenKind::T_DOT_DOT_DOT)) {
      has_triple_dot = true;
    }
  }
};

designated_initializer_clause
: designator brace_or_equal_initializer
;

designator
: dot identifier
;

expr_or_braced_init_list: {
  if (yytoken() == TokenKind::T_LBRACE)
    return parse_braced_init_list();
  ExpressionAST* expression = nullptr;
  if (!parse_expression(expression))
    parse_error("expected an expression");
};

virt_specifier_seq
: virt_specifier+;

function_body
{
  StatementAST* s1 = nullptr;
}
: { return skip_function_body; }
  ctor_initializer? lbrace
    {
      int depth = 1;
      TokenKind tok;
      while ((tok = yytoken()) != TokenKind::T_EOF_SYMBOL) {
        if (tok == TokenKind::T_LBRACE) {
          ++depth;
        } else if (tok == TokenKind::T_RBRACE) {
          if (!--depth) {
            break;
          }
        }
        yyconsume();
      }
    }
  rbrace
| ctor_initializer? compound_statement(s1)
| function_try_block
| equal default semicolon
| equal delete semicolon
;

enum_specifier
{
  DeclarativeRegion::Context region(this);
}
: enum_head lbrace rbrace
| enum_head lbrace enter(region) enumerator_list comma? rbrace
;

enum_head
: enum_key attribute_specifier_seq? enum_head_name? enum_base?
;

enum_head_name
: nested_name_specifier? identifier
;

opaque_enum_declaration(DeclarationAST*& yyast)
: enum_key attribute_specifier_seq? enum_head_name enum_base? semicolon
;

enum_key
: enum class
| enum struct
| enum
;

enum_base
: colon type_specifier_seq
;

enumerator_list
: enumerator_definition (comma enumerator_definition)*
;

enumerator_definition
{
  ExpressionAST* e1 = nullptr;
}
: enumerator (equal constant_expression(e1))*
;

enumerator
: identifier attribute_specifier_seq?
;

using_enum_declaration(DeclarationAST*& yyast)
: using elaborated_enum_specifier semicolon
;

namespace_definition(DeclarationAST*& yyast)
: nested_namespace_definition(yyast)
| named_namespace_definition(yyast)
| unnamed_namespace_definition(yyast)
;

named_namespace_definition(DeclarationAST*& yyast): {
  bool has_inline = false;

  if (match(TokenKind::T_INLINE)) {
    has_inline = true;
  }

  if (!match(TokenKind::T_NAMESPACE))
    return false;

  parse_attribute_specifier_seq();

  if (!match(TokenKind::T_IDENTIFIER))
    return false;

  auto name = yycursor - 1;

  parse_gcc_attribute_seq();

  expect(TokenKind::T_LBRACE);
  DeclarativeRegion::Context context(this);
  parse_enter_named_namespace_definition(context, name);
  parse_namespace_body();
  expect(TokenKind::T_RBRACE);
};

enter_named_namespace_definition(DeclarativeRegion::Context& context, uint32_t& name):
{
  const auto id = Name(unit->identifier(name));
  Symbol* ns = currentRegion_->scope.find(id);
  for (; ns; ns = ns->next) {
    if (ns->name == id && ns->isNamespace())
      break;
  }
  if (!ns) {
    ns = newSymbol();
    ns->name = id;
    NamespaceData data;
    data.region = newDeclarativeRegion(currentRegion_);
    ns->data = data;
    currentRegion_->scope.add(ns);
  }
  context.enter(std::get<NamespaceData>(ns->data).region);
};

unnamed_namespace_definition(DeclarationAST*& yyast): {
  bool has_inline = false;
  if (match(TokenKind::T_INLINE))
    has_inline = true;
  if (!match(TokenKind::T_NAMESPACE))
    return false;
  parse_attribute_specifier_seq();
  parse_gcc_attribute_seq();
  if (!match(TokenKind::T_LBRACE))
    return false;
  DeclarativeRegion::Context region(this);
  parse_enter_unnamed_namespace_definition(region);
  parse_namespace_body();
  expect(TokenKind::T_RBRACE);
};

enter_unnamed_namespace_definition(DeclarativeRegion::Context& region):
{
  auto ns = newSymbol();
  NamespaceData data;
  data.region = newDeclarativeRegion(currentRegion_);
  ns->data = data;
  currentRegion_->scope.add(ns);
};

nested_namespace_definition(DeclarationAST*& yyast): {
  if (!match(TokenKind::T_NAMESPACE))
    return false;
  if (!parse_enclosing_namespace_specifier())
    return false;
  if (!match(TokenKind::T_COLON_COLON))
    return false;
  bool has_inline = false;
  if (match(TokenKind::T_INLINE))
    has_inline = true;
  if (!match(TokenKind::T_IDENTIFIER))
    return false;
  parse_gcc_attribute_seq();
  if (!match(TokenKind::T_LBRACE))
    return false;
  DeclarativeRegion::Context region(this);
  parse_enter(region);
  parse_namespace_body();
  expect(TokenKind::T_RBRACE);
};

enclosing_namespace_specifier
: identifier (colon_colon inline?
    identifier / (colon_colon inline? identifier))*
;

namespace_body: {
  bool skipping = false;
  while (yytoken() != TokenKind::T_EOF_SYMBOL) {
    if (yytoken() == TokenKind::T_RBRACE) break;
    DeclarationAST* decl = nullptr;
    if (parse_declaration(decl)) {
      skipping = false;
    } else {
      parse_skip_declaration(skipping);
    }
  }
};

namespace_alias_definition(DeclarationAST*& yyast)
: namespace identifier equal qualified_namespace_specifier semicolon
;

qualified_namespace_specifier
: nested_name_specifier? namespace_name
;

using_directive(DeclarationAST*& yyast)
: attribute_specifier_seq? using namespace nested_name_specifier? namespace_name semicolon
;

using_declaration(DeclarationAST*& yyast)
: using using_declarator_list semicolon
;

using_declarator_list
: using_declarator dot_dot_dot? (comma using_declarator dot_dot_dot?)*
;

using_declarator
: typename? nested_name_specifier unqualified_id
;

asm_declaration(DeclarationAST*& yyast)
: attribute_specifier_seq? asm lparen string_literal rparen semicolon
;

linkage_specification(DeclarationAST*& yyast)
{
  DeclarationAST* d1 = nullptr;
}
: extern string_literal lbrace declaration_seq? rbrace
| extern string_literal declaration(d1)
;

attribute_specifier_seq
: attribute_specifier+
;

attribute_specifier
: gcc_attribute
| lbracket lbracket attribute_using_prefix? attribute_list rbracket rbracket
| alignment_specifier
| (__asm | __asm__) lparen string_literal_seq rparen
;

gcc_attribute
: (__attribute | __attribute__) lparen skip_balanced rparen
;

gcc_attribute_seq
: gcc_attribute+
;

skip_balanced
: {
  int count = 1;
  TokenKind tk;
  while ((tk = yytoken()) != TokenKind::T_EOF_SYMBOL) {
    if (tk == TokenKind::T_LPAREN) {
      ++count;
    } else if (tk == TokenKind::T_RPAREN) {
      if (!--count) {
        return true;
      }
    }
    yyconsume();
  }
  return false;
};

alignment_specifier
{
  ExpressionAST* e1 = nullptr;
}
: alignas lparen type_id dot_dot_dot? rparen
| alignas lparen constant_expression(e1) dot_dot_dot? rparen
;

attribute_using_prefix
: using attribute_namespace colon
;

attribute_list
: (attribute dot_dot_dot? | attribute?)
    (comma attribute? | attribute dot_dot_dot?)*
;

attribute
: attribute_token attribute_argument_clause?
;

attribute_token
: attribute_scoped_token
| identifier
;

attribute_scoped_token
: attribute_namespace colon_colon identifier
;

attribute_namespace
: identifier
;

attribute_argument_clause
: lparen skip_balanced rparen
;

module_declaration
: export_keyword? module_keyword module_name module_partition? attribute_specifier_seq? semicolon
;

module_name
: module_name_qualifier? identifier
;

module_partition
: colon module_name_qualifier? identifier
;

module_name_qualifier
: identifier dot (identifier dot)*
;

export_declaration(DeclarationAST*& yyast)
{
  DeclarationAST* d1 = nullptr;
}
: export declaration(d1)
| export lbrace declaration_seq? rbrace
| export_keyword module_import_declaration(d1)
;

module_import_declaration(DeclarationAST*& yyast)
: import_keyword module_name attribute_specifier_seq? semicolon
| import_keyword module_partition attribute_specifier_seq? semicolon
| import_keyword header_name attribute_specifier_seq? semicolon
;

global_module_fragment
: module_keyword semicolon declaration_seq?
;

private_module_fragment
: module_keyword colon private semicolon declaration_seq?
;

class_specifier: {
  const auto start = yycursor;
  auto it = class_specifiers_.find(start);
  if (it != class_specifiers_.end()) {
    auto [cursor, parsed] = it->second;
    yyrewind(cursor);
    return parsed;
  }
  DeclarativeRegion::Context region(this);

  DeclarativeRegion* enclosingRegion = nullptr;

  Symbol* classSymbol = nullptr;
  Name className;

  if (!parse_class_head(enclosingRegion, className)) {
    parse_reject_class_specifier(start);
    return false;
  }
  if (!match(TokenKind::T_LBRACE)) {
    parse_reject_class_specifier(start);
    return false;
  }
  parse_enter_class_specifier(region, enclosingRegion, className, classSymbol);
  if (!match(TokenKind::T_RBRACE)) {
    if (!parse_class_body())
      parse_error("expected class body");
    expect(TokenKind::T_RBRACE);
  }
  parse_leave_class_specifier(classSymbol, start);
};

enter_class_specifier(DeclarativeRegion::Context& region, DeclarativeRegion* enclosingRegion, Name& className, Symbol*& classSymbol):
{
  if (!enclosingRegion) {
    unit->report(yycursor, MessageKind::Error, "unresolved nested name specifier");
    enclosingRegion = currentRegion_;
  }

  classSymbol = newSymbol();
  classSymbol->name = className;
  enclosingRegion->scope.add(classSymbol);

  ClassData classData;
  classData.lexicalRegion = currentRegion_;
  classData.region = newDeclarativeRegion(enclosingRegion);
  classSymbol->data = classData;
  region.enter(classData.region);
};

leave_class_specifier(Symbol* classSymbol, uint32_t start):
{
  get_if<ClassData>(&classSymbol->data)->isComplete = true;
  class_specifiers_.emplace(start, std::make_tuple(yycursor, true));
};

reject_class_specifier(uint32_t start):
{
  class_specifiers_.emplace(start, std::make_tuple(yycursor, false));
  return false;
};

class_body: {
  bool skipping = false;
  while (yytoken() != TokenKind::T_EOF_SYMBOL) {
    if (yytoken() == TokenKind::T_RBRACE)
      break;
    auto saved = yycursor;
    DeclarationAST* declaration = nullptr;
    if (parse_member_specification(declaration)) {
      skipping = false;
    } else {
      if (!skipping)
        unit->report(yycursor, MessageKind::Error, "expected a declaration");
      if (yycursor == saved)
        yyconsume();
      skipping = true;
    }
  }
};

class_head(DeclarativeRegion*& region, Name& name)
: class_key attribute_specifier_seq?
  (class_head_name(region, name) class_virt_specifier?)?
  base_clause?
;

class_head_name(DeclarativeRegion*& region, Name& name)
: nested_name_specifier(region) class_name(name)
| class_name(name) { region = currentRegion_; }
;

class_virt_specifier
: final
;

class_key
: class
| struct
| union
;

member_specification(DeclarationAST*& yyast)
: member_declaration(yyast)
;

member_declaration(DeclarationAST*& yyast)
{
  DeclSpecs specs;
  Declarator decl;
}
: access_specifier colon
| __extension__? attribute_specifier_seq? decl_specifier_seq_no_typespecs(specs)?
        ( declarator_id attribute_specifier_seq? parameters_and_qualifiers
            ( member_function_definition_body
            | member_declarator_modifier semicolon)
        | decl_specifier_seq(specs)? { return specs.has_typespec(); }
            ( semicolon
            | declarator(decl) { return isFunctionDeclarator(decl); } member_function_definition_body
            | member_declarator_list semicolon))
| using_declaration(yyast)
| using_enum_declaration(yyast)
| static_assert_declaration(yyast)
| template_declaration(yyast)
| explicit_specialization(yyast)
| deduction_guide(yyast)
| alias_declaration(yyast)
| opaque_enum_declaration(yyast)
| empty_declaration(yyast)
;

member_function_definition_body
: (requires_clause | virt_specifier_seq?) function_body
;

member_declarator_modifier
: requires_clause
| brace_or_equal_initializer
| virt_specifier_seq? pure_specifier?
;

member_declarator_list
: member_declarator (comma member_declarator)*
;

member_declarator
{
  ExpressionAST* e1 = nullptr;
}
: identifier? attribute_specifier_seq? colon constant_expression(e1) brace_or_equal_initializer?
| declarator member_declarator_modifier
;

virt_specifier
: override
| final
;

pure_specifier
: equal integer_literal
;

conversion_function_id
: operator conversion_type_id
;

conversion_type_id
: type_specifier_seq conversion_declarator?
;

conversion_declarator
: ptr_operator conversion_declarator?
;

base_clause
: colon base_specifier_list
;

base_specifier_list
: base_specifier dot_dot_dot? (comma base_specifier dot_dot_dot?)*
;

base_specifier
: attribute_specifier_seq? (virtual access_specifier? | access_specifier virtual?)? class_or_decltype
;

class_or_decltype
: nested_name_specifier ( template simple_template_id
                        | type_name)
| decltype_specifier
| type_name
;

access_specifier
: private
| protected
| public
;

ctor_initializer
: colon mem_initializer_list
;

mem_initializer_list
: mem_initializer dot_dot_dot? (comma mem_initializer dot_dot_dot?)*
;

mem_initializer
: mem_initializer_id ( lparen expression_list? rparen
                     | braced_init_list)
;

mem_initializer_id
: class_or_decltype
| identifier
;

operator_function_id
: operator op
;

op
: new lbracket rbracket
| delete lbracket rbracket
| new
| delete
| co_await
| lparen rparen
| lbracket rbracket
| minus_greater
| minus_greater_star
| tilde
| exclaim
| plus
| minus
| star
| slash
| percent
| caret
| amp
| bar
| equal
| plus_equal
| minus_equal
| star_equal
| slash_equal
| percent_equal
| caret_equal
| amp_equal
| bar_equal
| equal_equal
| exclaim_equal
| less
| less_equal
| greater_greater_equal
| greater_greater
| greater_equal
| greater
| less_equal_greater
| amp_amp
| bar_bar
| less_less
| less_less_equal
| plus_plus
| minus_minus
| comma
;

literal_operator_id
: operator string_literal identifier
| operator user_defined_string_literal
;

template_declaration(DeclarationAST*& yyast)
{
  DeclarationAST* d1 = nullptr;
}
: template_head ( concept_definition
                | declaration(d1))
;

template_head
{
  DeclarativeRegion::Context region(this);
}
: template less enter(region) template_parameter_list greater requires_clause?
;

template_parameter_list
: template_parameter (comma template_parameter)*
;

requires_clause
{
  ExpressionAST* e1 = nullptr;
}
: requires constraint_logical_or_expression(e1)
;

constraint_logical_or_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: constraint_logical_and_expression(yyast) (bar_bar constraint_logical_and_expression(e1))*
;

constraint_logical_and_expression(ExpressionAST*& yyast)
{
  ExpressionAST* e1 = nullptr;
}
: primary_expression(yyast) (amp_amp primary_expression(e1))*
;

template_parameter
: type_parameter / (comma | greater)
| parameter_declaration
;

type_parameter
: type_parameter_key identifier? equal type_id
| type_parameter_key dot_dot_dot? identifier?
| type_constraint identifier? equal type_id
| type_constraint dot_dot_dot? identifier?
| template_head type_parameter_key identifier? equal id_expression
| template_head type_parameter_key dot_dot_dot? identifier?
;

type_parameter_key
: class
| typename
;

type_constraint
: nested_name_specifier? concept_name (less template_argument_list? greater)?
;

simple_template_id
{
  Name name;
}
: simple_template_id(name)
;

simple_template_id(Name& name)
: template_name(name) less template_argument_list? greater
    { name = control->getTemplateId(name); }
;

template_id
: operator_function_id less template_argument_list? greater
| literal_operator_id less template_argument_list? greater
| simple_template_id
;

template_argument_list
{
  TemplArgContext templArgContext(this);
}
: template_argument dot_dot_dot? (comma template_argument dot_dot_dot?)*
;

template_argument
{
  ExpressionAST* e1 = nullptr;
}
: type_id / (comma | greater | dot_dot_dot)
| template_argument_constant_expression(e1) / (comma | greater | dot_dot_dot)
| id_expression
;

constraint_expression(ExpressionAST*& yyast)
: logical_or_expression(yyast, false)
;

deduction_guide(DeclarationAST*& yyast)
: explicit_specifier? template_name lparen parameter_declaration_clause rparen minus_greater simple_template_id semicolon
;

concept_definition
{
  ExpressionAST* e1 = nullptr;
}
: concept concept_name equal constraint_expression(e1) semicolon
;

concept_name
: identifier
;

typename_specifier
: typename nested_name_specifier (template? simple_template_id | identifier)
;

explicit_instantiation(DeclarationAST*& yyast)
{
  DeclarationAST* d1 = nullptr;
}
: extern? template declaration(d1)
;

explicit_specialization(DeclarationAST*& yyast)
{
  DeclarationAST* d1 = nullptr;
}
: template less greater declaration(d1)
;

try_block(StatementAST*& yyast): {
  if (!match(TokenKind::T_TRY))
    return false;
  StatementAST* statement = nullptr;
  if (!parse_compound_statement(statement))
    parse_error("expected a compound statement");
  if (!parse_handler_seq())
    parse_error("expected an exception handler");
};

function_try_block: {
  if (!match(TokenKind::T_TRY))
    return false;
  if (yytoken() != TokenKind::T_LBRACE) {
    if (!parse_ctor_initializer())
      parse_error("expected a ctor initializer");
  }
  StatementAST* statement = nullptr;
  if (!parse_compound_statement(statement))
    parse_error("expected a compound statement");
  if (!parse_handler_seq())
    parse_error("expected an exception handler");
};

handler: {
  StatementAST* s1 = nullptr;
  if (!match(TokenKind::T_CATCH))
    return false;
  expect(TokenKind::T_LPAREN);
  if (!parse_exception_declaration())
    parse_error("expected an exception declaration");
  expect(TokenKind::T_RPAREN);
  StatementAST* statement = nullptr;
  if (!parse_compound_statement(statement))
    parse_error("expected a compound statement");
};

handler_seq: {
  if (yytoken() != TokenKind::T_CATCH)
    return false;
  while (yytoken() == TokenKind::T_CATCH) {
    parse_handler();
  }
};

exception_declaration
: attribute_specifier_seq? type_specifier_seq (declarator | abstract_declarator?)
| dot_dot_dot?
;

noexcept_specifier
{
  ExpressionAST* e1 = nullptr;
}
: noexcept lparen constant_expression(e1) rparen
| noexcept
| throw lparen rparen // deprecated
;

identifier_list
: identifier (comma identifier)*
;

